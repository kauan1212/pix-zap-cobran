-- Criar fun√ß√£o RPC para criar usu√°rios com perfil
CREATE OR REPLACE FUNCTION public.create_user_with_profile(
  user_email text,
  user_password text,
  user_full_name text,
  user_company text
)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  new_user_id UUID;
  result JSON;
BEGIN
  -- Verificar se o usu√°rio atual √© admin
  IF NOT EXISTS (
    SELECT 1 FROM profiles 
    WHERE id = auth.uid() AND is_admin = true
  ) THEN
    RAISE EXCEPTION 'Acesso negado: apenas administradores podem criar usu√°rios';
  END IF;

  -- Verificar se o email j√° existe
  IF EXISTS (
    SELECT 1 FROM auth.users WHERE email = user_email
  ) THEN
    RAISE EXCEPTION 'Email j√° est√° em uso';
  END IF;

  -- Criar usu√°rio no auth.users
  INSERT INTO auth.users (
    id,
    email,
    encrypted_password,
    email_confirmed_at,
    created_at,
    updated_at,
    raw_user_meta_data
  ) VALUES (
    gen_random_uuid(),
    user_email,
    crypt(user_password, gen_salt('bf')),
    now(), -- Confirmar email automaticamente
    now(),
    now(),
    jsonb_build_object(
      'full_name', user_full_name,
      'company', user_company
    )
  ) RETURNING id INTO new_user_id;

  -- Aguardar um pouco para o trigger ser executado
  PERFORM pg_sleep(0.5);

  -- Retornar resultado
  result := json_build_object('user_id', new_user_id, 'email', user_email);
  RETURN result;
END;
$$;

-- Fun√ß√£o para deletar usu√°rio completamente (se n√£o existir)
CREATE OR REPLACE FUNCTION public.delete_user_complete(user_email text)
RETURNS text
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    user_id UUID;
    deleted_count INTEGER := 0;
BEGIN
    -- Verificar se o usu√°rio atual √© admin
    IF NOT EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND is_admin = true
    ) THEN
      RAISE EXCEPTION 'Acesso negado: apenas administradores podem deletar usu√°rios';
    END IF;

    -- Pegar o ID do usu√°rio
    SELECT id INTO user_id FROM auth.users WHERE email = user_email;
    
    IF user_id IS NULL THEN
        RETURN '‚ùå Usu√°rio n√£o encontrado: ' || user_email;
    END IF;
    
    RAISE NOTICE 'üóëÔ∏è Deletando usu√°rio: % (%)', user_email, user_id;
    
    -- Deletar dados relacionados primeiro
    DELETE FROM billings WHERE user_id = user_id;
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RAISE NOTICE 'üí≥ Cobran√ßas deletadas: %', deleted_count;
    
    DELETE FROM clients WHERE user_id = user_id;
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RAISE NOTICE 'üë• Clientes deletados: %', deleted_count;
    
    DELETE FROM auto_billing_plans WHERE user_id = user_id;
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RAISE NOTICE 'ü§ñ Planos de cobran√ßa deletados: %', deleted_count;
    
    DELETE FROM recurring_plans WHERE user_id = user_id;
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RAISE NOTICE 'üîÑ Planos recorrentes deletados: %', deleted_count;
    
    -- Deletar perfil do usu√°rio
    DELETE FROM profiles WHERE id = user_id;
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RAISE NOTICE 'üë§ Perfil deletado: %', deleted_count;
    
    -- Deletar usu√°rio da autentica√ß√£o
    DELETE FROM auth.users WHERE id = user_id;
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RAISE NOTICE 'üîê Usu√°rio da autentica√ß√£o deletado: %', deleted_count;
    
    RETURN '‚úÖ Usu√°rio deletado completamente: ' || user_email;
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN '‚ùå Erro ao deletar usu√°rio: ' || SQLERRM;
END;
$$;